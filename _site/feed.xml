<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Centrarium</title>
    <description>Zoom in Coding from the Basic.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 26 Jan 2021 11:37:04 +0900</pubDate>
    <lastBuildDate>Tue, 26 Jan 2021 11:37:04 +0900</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>awesome-react-components</title>
        <description>&lt;h1 id=&quot;-absolutely-awesome-react-components--libraries&quot;&gt;🚀 Absolutely Awesome React Components &amp;amp; Libraries&lt;/h1&gt;

This is a list of AWESOME components. Nope, it’s NOT a comprehensive list of
every React component under the sun. So, what does “awesome” mean? Well:

&lt;ul&gt;
  &lt;li&gt;It solves a real problem&lt;/li&gt;
  &lt;li&gt;It does so in a 🦄 unique, 🦋 beautiful, or 🏆 exceptional way. (And it’s not super popular and well-known… no point in listing those.)&lt;/li&gt;
  &lt;li&gt;It has recent code commits!&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 22 Jan 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021/01/22/react-awesome-components/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/01/22/react-awesome-components/</guid>
        
        <category>React</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>React redux</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#리덕스란&quot; id=&quot;markdown-toc-리덕스란&quot;&gt;리덕스란?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;리덕스란&quot;&gt;리덕스란?&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;사용률이 가장 높은 상태관리 라이브러리&lt;/li&gt;
  &lt;li&gt;컴포넌트들의 상태 관련 로직들을 다른 파일들로 분리시켜서 더욱 효율적으로 관리&lt;/li&gt;
  &lt;li&gt;컴포넌트끼리 상태를 공유하게 될 때 여러 컴포넌트를 거치지 않고도 손쉽게 상태 값을 전달&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 21 Jan 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021/01/21/react-redux/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/01/21/react-redux/</guid>
        
        <category>React</category>
        
        <category>redux</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>React Microsoft login</title>
        <description>&lt;a href=&quot;https://github.com/alexandrtovmach/react-microsoft-login&quot;&gt;react-microsoft-login&lt;/a&gt; 해당 라이브러리를 적용하였습니다.

&lt;a href=&quot;https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps&quot;&gt;https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps&lt;/a&gt; 에서 앱을 등록하고 clientId 추출

</description>
        <pubDate>Thu, 21 Jan 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021/01/21/react-microsoft-login/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/01/21/react-microsoft-login/</guid>
        
        <category>React</category>
        
        <category>Microsoft</category>
        
        <category>login</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>React Kakao login</title>
        <description>
&lt;a href=&quot;https://github.com/wonism/react-kakao-login&quot;&gt;react-kakao-login&lt;/a&gt; 해당 라이브러리를 적용하였습니다.

&lt;a href=&quot;https://developers.kakao.com/console/app&quot;&gt;developers.kakao&lt;/a&gt; 에서 앱을 만들고 App Keys 추출 key중 JavaScript key 사용

</description>
        <pubDate>Thu, 21 Jan 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021/01/21/react-kakao-login/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/01/21/react-kakao-login/</guid>
        
        <category>React</category>
        
        <category>Kakao</category>
        
        <category>login</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>React Google login</title>
        <description>https://github.com/anthonyjgrove/react-google-login 해당 라이브러리를 적용하였습니다.

https://console.cloud.google.com/에서 앱을 만들고 API 개요로 이동 → 사용자 인증 정보 → 사용자 인증 정보 만들기 → 0Auth 클라이언트 ID 으로 클라이언트 ID 추출

</description>
        <pubDate>Thu, 21 Jan 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021/01/21/react-google-login/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/01/21/react-google-login/</guid>
        
        <category>React</category>
        
        <category>Google</category>
        
        <category>login</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>React Facebook login</title>
        <description>
https://github.com/keppelen/react-facebook-login 해당 라이브러리를 적용하였습니다.

https://developers.facebook.com/apps/에서 앱을 만들고 앱ID 추출

</description>
        <pubDate>Thu, 21 Jan 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021/01/21/react-facebook-login/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/01/21/react-facebook-login/</guid>
        
        <category>React</category>
        
        <category>Facebook</category>
        
        <category>login</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>React Hooks custom Hook</title>
        <description>
React Hooks api를 마스터하면 작업에서 더 잘 사용할 수 있고 React를 더 잘 이해할 수 있습니다. 이 시리즈에서는 초보자와 리뷰어가 사용하기 매우 쉬운 많은 예제 코드와 효과 데모를 사용합니다.

지금까지 많은 공식 후크 API를 학습 한 후 자체 후크 중 일부를 만들 수도 있으며, 심지어 공식적으로도 개발자가 쉽게 재사용 할 수 있도록 구성 요소 논리를 사용자 지정 후크로 추상화하도록 권장하고 있습니다.

사용자 정의 후크는 이름이 “use”로 시작하는 함수이며 다른 후크는 함수 내에서 호출 될 수 있습니다.

Hook을 커스터마이징함으로써 컴포넌트 로직을 재사용 가능한 함수로 추출 할 수 있습니다.

</description>
        <pubDate>Wed, 27 May 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/05/27/react-hooks8-customHooks/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/05/27/react-hooks8-customHooks/</guid>
        
        <category>React</category>
        
        <category>hooks</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>React Hooks useRef</title>
        <description>
React Hooks api를 마스터하면 작업에서 더 잘 사용할 수 있고 React를 더 잘 이해할 수 있습니다. 이 시리즈에서는 초보자와 리뷰어가 사용하기 매우 쉬운 많은 예제 코드와 효과 데모를 사용합니다.

다음으로 컴포넌트의 Dom 노드에 직접 액세스 할 수있는 useRef 후크를 함께 배우겠습니다. 포커스를 얻기위한 입력 상자의 필요성을 예로 들어 오늘 useRef에 대해 알아 보겠습니다.

</description>
        <pubDate>Tue, 26 May 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/05/26/react-hooks7-useRef/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/05/26/react-hooks7-useRef/</guid>
        
        <category>React</category>
        
        <category>hooks</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>React Hooks useMemo</title>
        <description>
React Hooks api를 마스터하면 작업에서 더 잘 사용할 수 있고 React를 더 잘 이해할 수 있습니다. 이 시리즈에서는 초보자와 리뷰어가 사용하기 매우 쉬운 많은 예제 코드와 효과 데모를 사용합니다.

지난 장에서 성능 최적화를위한 useCallback에 대해 배웠습니다. 성능 최적화를위한 또 다른 후크 API 인 useMemo가 있습니다. 예제를 살펴 보겠습니다.

</description>
        <pubDate>Tue, 19 May 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/05/19/react-hooks6-useMemo/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/05/19/react-hooks6-useMemo/</guid>
        
        <category>React</category>
        
        <category>hooks</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>React Hooks useCallback</title>
        <description>
React Hooks api를 마스터하면 작업에서 더 잘 사용할 수 있고 React를 더 잘 이해할 수 있습니다. 이 시리즈에서는 초보자와 리뷰어가 사용하기 매우 쉬운 많은 예제 코드와 효과 데모를 사용합니다.

useCallback에 대해 자세히 알아보기 전에 성능 최적화와 관련된 내용을 검토해 보겠습니다. 그러면 useCallback이 무엇인지, 왜 사용하는지, 사용 방법을 이해하는 데 도움이 될 것입니다.

구성 요소가 여러 번 재사용되는 코드 시나리오부터 시작하겠습니다.

</description>
        <pubDate>Mon, 18 May 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/05/18/react-hooks5-useCallback/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/05/18/react-hooks5-useCallback/</guid>
        
        <category>React</category>
        
        <category>hooks</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
  </channel>
</rss>
